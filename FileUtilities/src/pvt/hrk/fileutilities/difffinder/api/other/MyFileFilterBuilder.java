package pvt.hrk.fileutilities.difffinder.api.other;

import java.io.FileFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class MyFileFilterBuilder {
	 private static final Logger LOGGER = Logger.getLogger(MyFileFilterBuilder.class
	            .getClass().getName());
	 public static final FileFilter ALLOW_EVERYTHING = new MyFileFilterBuilder().build();
	 public static final FileFilter EXCLUDE_AUTOGENERATED_FILES = new MyFileFilterBuilder().excludeFileNamesContaining(new String[]{"idea","generated","gclasses"}).build();
	private List<String> includeOnlyFileNamesContaining;
	private List<String> excludeFileNamesContaining;
	public MyFileFilterBuilder() {

	}
		public MyFileFilterBuilder excludeFileNamesContaining(List<String> keywords) {
			if (keywords != null && excludeFileNamesContaining == null) {
				excludeFileNamesContaining = new ArrayList<String>(keywords);
			}
			return this;
		}

		public MyFileFilterBuilder includeOnlyFileNamesContaining(List<String> keywords) {
			if (keywords != null && includeOnlyFileNamesContaining == null) {
				includeOnlyFileNamesContaining = new ArrayList<String>(keywords);
			}
			return this;
		}
		public MyFileFilterBuilder includeOnlyFileNamesContaining(String[] keywords) {
			return includeOnlyFileNamesContaining(Arrays.<String>asList(keywords));
		}
		public MyFileFilterBuilder excludeFileNamesContaining(String[] keywords) {
			return excludeFileNamesContaining(Arrays.<String>asList(keywords));
		}
		public FileFilter build() {
			return (file)->{
				String fileName = file.getName();
				boolean retVal;

				if (!DiffFinderUtils.isNullOrEmpty(excludeFileNamesContaining)) {
					retVal= excludeFileNamesContaining.stream().noneMatch(name -> fileName.contains(name));
				} else if (!DiffFinderUtils.isNullOrEmpty(includeOnlyFileNamesContaining)) {
					retVal= includeOnlyFileNamesContaining.stream().anyMatch(name -> fileName.contains(name));
				}else {
					retVal= true; //allow by default
				}
				if(LOGGER.isLoggable(Level.FINE)) {
					LOGGER.fine("Returning:"+retVal+" , for file: "+fileName);
				}
				return retVal;
			};
		}
}
